package main

import (
	"reflect"
	"testing"
)

func TestGetPackage(t *testing.T) {
	t.Run("standard package", func(t *testing.T) {
		if GetPackage("fmt") == nil {
			t.Error("expected *packages.Packages with non-nil value but nil")
			return
		}
	})

	t.Run("not standard package", func(t *testing.T) {
		if got := GetPackage("hello"); got != nil {
			t.Errorf("expected nil value but got %#v", got)
			return
		}
	})
}

func TestNewPackage(t *testing.T) {
	got := NewPackage(GetPackage("errors"), nil)
	want := Package{
		Name:      "errors",
		Types:     nil,
		Constants: nil,
		Variables: nil,
		Functions: []string{
			"New",
			"Unwrap",
			"Is",
			"As",
		},
	}

	if !reflect.DeepEqual(got, want) {
		t.Errorf("unexpected result:\n  got:  %#v\n  want: %#v", got, want)
		return
	}
}

func TestSourceErrors(t *testing.T) {
	t.Run("errors", func(t *testing.T) {
		got, err := NewPackage(GetPackage("errors"), nil).Source()
		if err != nil {
			t.Errorf("unexpected error: %v", err)
			return
		}

		want := `// Package errors wraps the standard errors package to extend.
// Code generated by xstd. DO NOT EDIT.
package errors

import "errors"

// wrap std functions
var (
	New    = errors.New
	Unwrap = errors.Unwrap
	Is     = errors.Is
	As     = errors.As
)
`
		if got != want {
			t.Errorf("unexpected result:\n  got:\n%s\n  want:\n%s", got, want)
			return
		}
	})

	t.Run("time", func(t *testing.T) {
		got, err := NewPackage(GetPackage("time"), nil).Source()
		if err != nil {
			t.Errorf("unexpected error: %v", err)
			return
		}

		want := `// Package time wraps the standard time package to extend.
// Code generated by xstd. DO NOT EDIT.
package time

import "time"

// wrap std variables
var (
	UTC   = time.UTC
	Local = time.Local
)

// wrap std constants
const (
	ANSIC       = time.ANSIC
	UnixDate    = time.UnixDate
	RubyDate    = time.RubyDate
	RFC822      = time.RFC822
	RFC822Z     = time.RFC822Z
	RFC850      = time.RFC850
	RFC1123     = time.RFC1123
	RFC1123Z    = time.RFC1123Z
	RFC3339     = time.RFC3339
	RFC3339Nano = time.RFC3339Nano
	Kitchen     = time.Kitchen
	Stamp       = time.Stamp
	StampMilli  = time.StampMilli
	StampMicro  = time.StampMicro
	StampNano   = time.StampNano
	January     = time.January
	February    = time.February
	March       = time.March
	April       = time.April
	May         = time.May
	June        = time.June
	July        = time.July
	August      = time.August
	September   = time.September
	October     = time.October
	November    = time.November
	December    = time.December
	Sunday      = time.Sunday
	Monday      = time.Monday
	Tuesday     = time.Tuesday
	Wednesday   = time.Wednesday
	Thursday    = time.Thursday
	Friday      = time.Friday
	Saturday    = time.Saturday
	Nanosecond  = time.Nanosecond
	Microsecond = time.Microsecond
	Millisecond = time.Millisecond
	Second      = time.Second
	Minute      = time.Minute
	Hour        = time.Hour
)

// wrap std functions
var (
	Parse                  = time.Parse
	ParseInLocation        = time.ParseInLocation
	ParseDuration          = time.ParseDuration
	Sleep                  = time.Sleep
	NewTimer               = time.NewTimer
	After                  = time.After
	AfterFunc              = time.AfterFunc
	NewTicker              = time.NewTicker
	Tick                   = time.Tick
	Since                  = time.Since
	Until                  = time.Until
	Now                    = time.Now
	Unix                   = time.Unix
	Date                   = time.Date
	FixedZone              = time.FixedZone
	LoadLocation           = time.LoadLocation
	LoadLocationFromTZData = time.LoadLocationFromTZData
)

// wrap std types
type (
	ParseError = time.ParseError
	Timer      = time.Timer
	Ticker     = time.Ticker
	Time       = time.Time
	Month      = time.Month
	Weekday    = time.Weekday
	Duration   = time.Duration
	Location   = time.Location
)
`
		if got != want {
			t.Errorf("unexpected result:\n  got:\n%s\n  want:\n%s", got, want)
			return
		}
	})
}
